{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_adls",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "externalCall1",
					"linkedService": {
						"referenceName": "ls_rest2",
						"type": "LinkedServiceReference"
					}
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "filter1"
				}
			],
			"script": "source(output(\n\t\tLocations as (Location as (elevation as double, id as integer, latitude as double, longitude as double, name as string, nationalPark as string, obsSource as string, region as string, unitaryAuthArea as string)[])\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'json',\n\tfileSystem: 'metoffice',\n\tfileName: 'sitelist.json',\n\tdocumentForm: 'documentPerLine') ~> source1\nfilter1 call(mapColumn(\n\t\tname\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\toutput(\n\t\theaders as [string,string],\n\t\tstatus as string,\n\t\tbody as (SiteRep as (DV as (Location as (name as string))))\n\t),\n\tallowSchemaDrift: true,\n\tformat: 'rest',\n\tstore: 'restservice',\n\ttimeout: 30,\n\thttpMethod: 'GET',\n\taddResponseCode: true,\n\trequestFormat: ['type' -> 'json'],\n\tresponseFormat: ['type' -> 'json', 'documentForm' -> 'singleDocument']) ~> externalCall1\nflatten1 derive(rowRelativeURL = concat('/val/wxfcs/all/json/', toString(id),'?res=3hourly&key=005dfce0-63ea-4e19-b9ad-9869a3d68bb7')) ~> derivedColumn1\nsource1 foldDown(unroll(Locations.Location, Locations.Location),\n\tmapColumn(\n\t\televation = Locations.Location.elevation,\n\t\tid = Locations.Location.id,\n\t\tlatitude = Locations.Location.latitude,\n\t\tlongitude = Locations.Location.longitude,\n\t\tname = Locations.Location.name,\n\t\tnationalPark = Locations.Location.nationalPark,\n\t\tobsSource = Locations.Location.obsSource,\n\t\tregion = Locations.Location.region,\n\t\tunitaryAuthArea = Locations.Location.unitaryAuthArea\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flatten1\nderivedColumn1 filter(left(name,1) == 'K') ~> filter1"
		}
	}
}